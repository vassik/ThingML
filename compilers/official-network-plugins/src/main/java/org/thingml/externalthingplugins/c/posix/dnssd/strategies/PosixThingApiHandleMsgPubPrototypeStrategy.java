/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 */
package org.thingml.externalthingplugins.c.posix.dnssd.strategies;


import org.thingml.compilers.c.CCompilerContext;
import org.thingml.compilers.interfaces.c.ICThingApiPublicPrototypeStrategy;
import org.thingml.externalthingplugins.c.posix.PosixDNSSDExternalThingPlugin;
import org.thingml.externalthingplugins.c.posix.dnssd.utils.DNSSDUtils;
import org.thingml.xtext.thingML.Message;
import org.thingml.xtext.thingML.Port;
import org.thingml.xtext.thingML.Thing;

/**
 * Created by vassik on 15.11.16.
 */
public class PosixThingApiHandleMsgPubPrototypeStrategy implements ICThingApiPublicPrototypeStrategy{

    private PosixDNSSDExternalThingPlugin plugin;

    public PosixThingApiHandleMsgPubPrototypeStrategy(PosixDNSSDExternalThingPlugin _pulgin) {
        plugin = _pulgin;
    }

    @Override
    public void generatePublicPrototypes(Thing thing, StringBuilder builder, CCompilerContext ctx) {
        builder.append("//Declaration of prototypes to handle messages: '" +
                DNSSDUtils.dnssd_publish_service_receive + "', '" +
                DNSSDUtils.dnssd_unpublish_service_receive + "'. " +
                "Generated by " + this.getClass().getSimpleName() + "\n");

        Port port = DNSSDUtils.getDNSSDPort(thing);
        if(port == null)
            return;

        Message dnssd_publish_message = DNSSDUtils.getDNSSDPublishService(port.getReceives());
        builder.append("void " + ctx.getHandlerName(thing, port, dnssd_publish_message));
        ctx.appendFormalParameters(thing, builder, dnssd_publish_message);
        builder.append(";\n");

        Message dnssd_unpublish_message = DNSSDUtils.getDNSSDUnpublishService(port.getReceives());
        builder.append("void " + ctx.getHandlerName(thing, port, dnssd_unpublish_message));
        ctx.appendFormalParameters(thing, builder, dnssd_unpublish_message);
        builder.append(";\n");
    }
}
