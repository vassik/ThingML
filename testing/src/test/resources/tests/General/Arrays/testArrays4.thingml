import "../../thingml.thingml"

thing TestArrays4 includes Msgs, Test
@test " # ABC"
{

	provided port p1 {
		receives rep
		sends go
	}	

	provided port p2 {
		receives rep
		sends go
	}	

	provided port p3 {
		receives rep
		sends go
	}	
	
	statechart c init s {
		state s {
			on entry do
				p1!go()
			end
			internal event e : p1?rep action do
				TestOut(e.c)
				p2!go()
			end
			internal event e : p2?rep action do
				TestOut(e.c)
				p3!go()
			end
			internal event e : p3?rep action do
				TestOut(e.c)
				TestDone()
			end
		}
	}
}


thing fragment Msgs {
	message go();
	message rep(c : Char);
}

thing A includes Msgs {
	readonly property c : Int32 = 2+2
	property ar : Int32[c]

	required port myPort {
		sends rep
		receives go
	}	
	
	statechart c init I {
		state I {
			transition -> s event myPort?go
		}
		state s {
			on entry do
				var n : Int32 = 0
				while(n < c) do
					ar[n] = n
					n = n + 1
				end
				if (ar[c-1] == 4) do
					myPort!rep('\'A\'')
				end
				if (ar[c-1] == 9) do
					myPort!rep('\'B\'')
				end
				if (ar[c-1] == 3) do
					myPort!rep('\'C\'')
				end
			end
		}
	}
}

configuration Config {
	instance test : TestArrays4
	
	instance a : A
	set a.c = 5 + 0
	instance b : A
	set b.c = 5 + 5
	instance d : A
	
	connector a.myPort => test.p1
	connector b.myPort => test.p2
	connector d.myPort => test.p3
}