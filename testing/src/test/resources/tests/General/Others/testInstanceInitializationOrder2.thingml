import "../../thingml.thingml"

thing fragment Msgs {
	message m(c : Char);
}

thing TestInstanceInitializationOrder2 includes Test, Msgs
@test "t # (A(B|C|D)(B|C|D)(B|C|D)E)|((C|D)(C|D)ABE)|((C|D)A(B|C|D)(B|C|D)E)"
{

	provided port out
	@sync_send "true"
	{
		receives m
	}

	statechart TestOnEntry init I {
	
		state I {
			internal event e : out?m
			action TestOut(e.c)
			
			internal event Test?Done
			action TestDone()
		}
	}
}

thing I includes Msgs
{
	property inst : Char

	provided port p 
	{
		sends m
		receives m
	}

	required port r 
	{
		sends m
		receives m
	}

	required port out 
	@sync_send "true"
	{
		sends m
	}

	statechart myC init J {
	
		state J {
			on entry do
				out!m(inst)
			end
		}
	}
}

configuration conf {
	instance test : TestInstanceInitializationOrder2
	
	instance A : I
	set A.inst = '\'A\''
	instance B : I
	set B.inst = '\'B\''
	instance C : I
	set C.inst = '\'C\''
	instance D : I
	set D.inst = '\'D\''
	instance E : I
	set E.inst = '\'E\''
	connector C.r => B.p
	connector B.r => A.p
	connector B.r => D.p
	connector D.r => C.p
	connector E.r => C.p
	
	connector A.out => test.out
	connector B.out => test.out
	connector C.out => test.out
	connector D.out => test.out
	connector E.out => test.out
}