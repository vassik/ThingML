import "../../thingml.thingml"

// Two independents client server couples.

thing PingMsg {
    message ping();
    message pong();        
}

thing PingServer includes PingMsg, TestMsgs {
    
    provided port pp {
         receives ping
         sends pong
    }
    
    statechart PingServer init Idle {
    
        state Idle {
            internal event p : pp?ping
            action pp!pong() 
        }    
    } 
}

thing TestMultiClientPing includes Test, PingMsg
@test "0 # P1111" // TODO: To be double-checked...
{
	property doneCount : Integer = 0
	
    required port ppclient1 {
        sends ping
        receives pong    
    }
    
    required port ppclient2 {
        sends ping
        receives pong    
    }
    
	statechart TestMultiClientPing init Ping {	
		state Ping {
			transition -> Pong
			event m : Test?In
			guard m.c == '\'0\''
			action do
            	TestOut('\'P\'')
            	ppclient1!ping()
            	ppclient2!ping()
            end
		}
		
		state Pong {
			internal event ppclient1?pong
			action do
				TestOut('\'1\'')
				doneCount = doneCount + 1
				if (doneCount == 2)
					TestDone()
			end
			
			internal event ppclient2?pong
			action do
				TestOut('\'1\'')
				doneCount = doneCount + 1
				if (doneCount == 2)
					TestDone()
			end						
		}
	}
}

configuration conf {
	instance test : TestMultiClientPing
	
	instance pingServ : PingServer
	
	connector test.ppclient1 => pingServ.pp
	connector test.ppclient2 => pingServ.pp
}