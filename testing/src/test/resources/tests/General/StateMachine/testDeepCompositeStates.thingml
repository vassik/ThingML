import "../../thingml.thingml"

thing TestDeepCompositeStates includes Test 
@test "n # (012abc|abc012)"
@test "na # (012abc|abc012)(63gd|gd63)"
@test "naa # (012abc|abc012)(63gd|gd63)(74he|he74)"
@test "naaa # (012abc|abc012)(63gd|gd63)(74he|he74)(85if|if85)"
{
	statechart TestDeepCompositeStates init I {
		internal event Test?Done
		action TestDone()
	
		state I {
			transition -> C1
			event m : Test?In
			guard m.c == '\'n\''
		}
		
		composite state C1 init C2 {
		
		on entry TestOut('\'0\'')
		on exit TestOut('\'5\'')
		transition -> I
		event m : Test?In
		guard m.c == '\'a\''
		
			state C1S1 {
				on entry TestOut('\'4\'')
                on exit TestOut('\'8\'')
			}
			
			composite state C2 init C3 {
				
				on entry TestOut('\'1\'')
				transition -> C1S1
				event m : Test?In
				guard m.c == '\'a\''
				
				state C2S1 {	
					on entry TestOut('\'3\'')
                    on exit TestOut('\'7\'')
				}
				
				composite state C3 init C3S1 {
				
					on entry TestOut('\'2\'')
                    on exit TestOut('\'6\'')
					transition -> C2S1
					event m : Test?In
					guard m.c == '\'a\''
					
					state C3S1{
					}
				}
			}
		}

		region r init r_I{
			state r_I {
				transition -> r_C1
				event m : Test?In
				guard m.c == '\'n\''
			}
		
			composite state r_C1 init r_C2 {
		
			on entry TestOut('\'a\'')
			on exit TestOut('\'f\'')
			transition -> r_I
			event m : Test?In
			guard m.c == '\'a\''
		
				state r_C1S1 {
					on entry TestOut('\'e\'')
		            on exit TestOut('\'i\'')
				}
			
				composite state r_C2 init r_C3 {
				
					on entry TestOut('\'b\'')
					transition -> r_C1S1
					event m : Test?In
					guard m.c == '\'a\''
				
					state r_C2S1 {	
						on entry TestOut('\'d\'')
		                on exit TestOut('\'h\'')
					}
				
					composite state r_C3 init r_C3S1 {
				
						on entry TestOut('\'c\'')
		                on exit TestOut('\'g\'')
						transition -> r_C2S1
						event m : Test?In
						guard m.c == '\'a\''
					
						state r_C3S1{
						}
					}
				}
			}
		}
	}
}
